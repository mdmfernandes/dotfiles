# : << EOF
###############################################################################
# Miguel's TMUX config
# ====================
# Available at https://github.com/mdmfernandes/dotfiles
###############################################################################
# ---- General ----
set -g default-terminal "tmux-256color"
set -sa terminal-overrides ",xterm*:Tc"
set -s escape-time 10                               # faster command sequences
set -sg repeat-time 200                             # decrease repeat timeout
set -s focus-events on
set -g history-limit 50000                          # boost history


# ---- VI Mode ----
# in case $VISUAL or $EDITOR are not set
set -g status-keys vi
set -g mode-keys vi


# ---- Configuration File ----
# edit configuration
bind e new-window -n "~/.tmux.conf" "\${EDITOR:-nvim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# ---- Display ----
set -g base-index 1             # start windows numbering at 1
setw -g pane-base-index 1       # make pane numbering consistent with windows

setw -g automatic-rename on     # rename window to reflect current program
set -g renumber-windows on      # renumber windows when a window is closed

set -g set-titles on            # set terminal title

set -g display-panes-time 1000  # pane indicators display time
set -g display-time 1000        # status messages display time

set -g status-interval 5        # status line update interval

# activity
set -g monitor-activity on      # highlight windows with activity
set -g visual-activity off      # don't show a message when there is activity


# ---- Keys ----
# prefix (Ctrl-a)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# create session
bind C-c new-session
# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v -c "#{pane_current_path}"
# split current window vertically
bind | split-window -h -c "#{pane_current_path}"

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# window switch position
bind -r S-Left swap-window -t -1\; select-window -t -1  # Move window to left
bind -r S-Right swap-window -t +1\; select-window -t +1 # Move window to right

# kill window (default: &)
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# open a new window in the current directory
bind C new-window -c "#{pane_current_path}"

# set default directory for new windows in this session to current directory
bind d attach-session -c "#{pane_current_path}"

# detach client (default: d)
bind-key D detach-client

# join windows
bind G command-prompt -p "get pane from:"  "join-pane -s :'%%'"
bind S command-prompt -p "send pane to:"  "join-pane -t :'%%'"


# ---- Copy Mode ----
bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'V' send -X select-line
bind -T copy-mode-vi 'C-v' send -X rectangle-toggle
bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line


# ---- Buffers ----
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from


# ---- Launchers ----
bind-key y new-window -S -n "⚡️yazi" -c "#{pane_current_path}" "export EDITOR=\${EDITOR:-nvim}; yazi"
bind-key Y new-window -S -n "⚡️yazi" "export EDITOR=\${EDITOR:-nvim}; yazi"

# ---- Override TMUX Settings ----
if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# ---- Plugins ----
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'mdmfernandes/tmux-rose-pine'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'mdmfernandes/tmux-network-bandwidth'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'wfxr/tmux-fzf-url'

# ---- Plugins Configurations ----

# theme
set -g @rose_pine_variant 'main'
set -g @rose_pine_network '#{network_bandwidth}#(cut -c3- ~/.tmux.conf | sh -s _isvpn)'
set -g @rose_pine_cpu '#{sysstat_cpu}'
set -g @rose_pine_ram '#{sysstat_mem}'
set -g @rose_pine_date_time '%d-%b %H:%M' # It accepts the date UNIX command format (man date for info)

# sysstat
# TODO: fix icons - they are not centered in the status bar
set -g @sysstat_cpu_view_tmpl '󰍛:#[fg=#{cpu.color}]#{cpu.pused}'
set -g @sysstat_mem_view_tmpl ":#[fg=#{mem.color}]#{mem.pused}"
set -g @sysstat_cpu_color_low "#9ccfd8"
set -g @sysstat_cpu_color_medium "#f6c177"
set -g @sysstat_cpu_color_stress "#eb6f92"
set -g @sysstat_mem_color_low "#9ccfd8"
set -g @sysstat_mem_color_medium "#f6c177"
set -g @sysstat_mem_color_stress "#eb6f92"

# network-bandwidth
set -g @tmux-network-bandwidth-suffix "B"
set -g @tmux-network-bandwidth-format "%f"

# tmux-fzf-url
set -g @fzf-url-fzf-options '-h 50% --multi -0 --no-preview --no-mouse --no-info'

# tmux-continuum
set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'


# EOF
#
# _get_ip() {
#     realip=$(echo "$2" | cut -d ' ' -f 2 | head -1)
# }
#
# _myip() {
#     ip=$(ip -o addr show scope global |\
#         grep -vE 'inet6|vm|virb|docker|via_vpn|br-' |\
#         awk '{split($4, a, "/"); print $2 " " a[1] "\\n"}')
#
#     tun=$(echo "$ip" | grep -E 'tun|wg|proton|vpn')
#     if [ "$tun" ]; then
#         _get_ip $tun
#         echo "$realip 🔑"
#     else
#         _get_ip $ip
#         echo "$realip"
#     fi
# }
#
# _isvpn() {
#     tun=$(ip -o addr show scope global |\
#         grep -vE 'inet6|vm|virb|docker|via_vpn|br-' |\
#         awk '{split($4, a, "/"); print $2 " " a[1] "\\n"}' |\
#         grep -E 'tun|wg|proton|vpn')
#
#     if [ "$tun" ]; then
#         echo " 🔑"
#     fi
# }
#
# "$@"

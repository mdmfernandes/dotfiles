###############################################################################
# Miguel's ZSH config
# ===================
# Available at https://github.com/mdmfernandes/dotfiles
# Theme:
#   - Powerlevel10k (https://github.com/romkatv/powerlevel10k)
# Plugins:
#   - z.sh (https://github.com/rupa/z)
#   - zsh-syntax-highlighting (https://github.com/zsh-users/zsh-syntax-highlighting)
#   - zsh-autosuggestions (https://github.com/zsh-users/zsh-autosuggestions)
#   - zsh-completions (https://github.com/zsh-users/zsh-completions)
#   - conda-zsh-completion (https://github.com/esc/conda-zsh-completion)
###############################################################################

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Set language environment
export LANG=en_US.UTF-8


#### Helpers ##################################################################
# Check if a command exists
exists()
{
    command -v "$1" >/dev/null 2>&1
}

# Get this script path
ZDOTDIR="${${(%):-%x}:h}"

# ZSH user data directory (directory for themes, plugins, etc.)
ZSH_USERDATA="${HOME}/.local/share/zsh"

#### Options ##############################################################
setopt autocd               # if only directory path is entered, cd there.
setopt autopushd            # make cd push the old directory onto the directory stack
setopt appendhistory        # immediately append history instead of overwriting
setopt cdsilent             # don't print the working directory after a `cd`
setopt extendedglob         # extended globbing. Allows using regular expressions with *
setopt histignorealldups    # if a new command is a duplicate, remove the older one
setopt histignorespace      # ignore commands that start with space
setopt histverify           # show command with history expansion to user before running it
setopt incappendhistory     # save commands are added to the history immediately, otherwise only when shell exits
setopt interactivecomments  # allow comments even in interactive shells
setopt magicequalsubst      # enable filename expansion for arguments of the form 'foo=bar'
setopt nobeep               # no beep
setopt nocaseglob           # case insensitive globbing
setopt nocheckjobs          # don't warn about running processes when exiting
setopt noclobber            # prevent from overwriting an existing file
setopt nonomatch            # hide error message if there is no match for the pattern
setopt numericglobsort      # sort filenames numerically when it makes sense
setopt promptsubst          # perform parameter expansion, command substitution and arithmetic expansion in prompts
setopt pushdignoredups      # don't push multiple copies of the same directory onto the stack
setopt pushdminus           # exchanges the meaning of `+` and `-` when used with a number to specify a directory in the stack
setopt pushdsilent          # don't print the directory stack after `pushd` or `popd`

unsetopt flowcontrol        # disable output flow control in the shell's editor


#### Completion ###############################################################
setopt auto_menu                                                # automatically use menu completion
setopt complete_in_word                                         # keep the cursor at the completion, if ambiguous
setopt always_to_end                                            # move cursor to end if word has one match

# colored completion (different colors for dirs, files, etc.)
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # case insensitive tab completion
zstyle ':completion:*' rehash true                              # automatically find new executables in path
zstyle ':completion:*' menu select                              # select completions with arrow keys
zstyle ':completion:*:functions' ignored-patterns '_*'          # don't complete functions

zstyle ':completion:*' special-dirs true                        # complete . and .. special directories
# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path ${ZDOTDIR}/.zsh_cache

# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        clamav colord cups daemon dbus dhcpcd distcache dnsmasq dovecot fax ftp games gdm \
        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        named netdump news nfsnobody 'nm-*' nobody nscd ntp nut nx obsrun openvpn \
        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync 'systemd-*' tftp \
        usbmux uucp vcsa wwwrun xfs '_*'

WORDCHARS=${WORDCHARS//\/[&.;]} # don't consider certain characters part of the word

# zsh-completions
if [[ -r "${ZSH_USERDATA}/plugins/zsh-completions/zsh-completions.plugin.zsh" ]]; then
    fpath=(${ZSH_USERDATA}/plugins/zsh-completions $fpath)
fi
# conda-zsh-completions
if [[ -r "${ZSH_USERDATA}/plugins/conda-zsh-completion/conda-zsh-completion.plugin.zsh" ]]; then
    fpath=(${ZSH_USERDATA}/plugins/conda-zsh-completion $fpath)
fi

# Load completion.
# NOTE: For better performance, make sure that the zsh global compinit is disabled
# in the .zshenv file, by placing the command `skip_global_compinit=1` at the EOF.
autoload -Uz compinit && compinit


#### Vi mode ##################################################################
# Preferred editor (this will also change the ZSH mode)
export EDITOR='nvim'
export VISUAL='nvim'

# Although the editor set the zsh mode, we can force the vi mode
bindkey -v              # vi mode
export KEYTIMEOUT=2     # decrease change mode time to 0.2s

# Use ' to edit a command line in the editor, if zsh is in insert mode
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd "'" edit-command-line


#### Keybindings ##############################################################
bindkey '^[[7~' beginning-of-line                   # Home key
bindkey '^[[H' beginning-of-line                    # Home key
bindkey '^a' beginning-of-line                      # Ctrl+a
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line    # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                         # End key
bindkey '^[[F' end-of-line                          # End key
bindkey '^e' end-of-line                            # Ctrl+e
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line           # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                      # Insert key
bindkey '^[[3~' delete-char                         # Delete key
bindkey '^[[C'  forward-char                        # Right key
bindkey '^[[D'  backward-char                       # Left key

# Search history
bindkey '^[[5~' history-beginning-search-backward   # Page up key
bindkey '^[[6~' history-beginning-search-forward    # Page down key
bindkey '^r' history-incremental-search-backward    # Ctrl+r
bindkey '^s' history-incremental-search-forward     # Ctrl+s
bindkey '^P' up-history                             # Ctrl+p
bindkey '^N' down-history                           # Ctrl+n

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word
bindkey '^[Od' backward-word
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# Delete chars and words
bindkey '^?' backward-delete-char                   # Backspace
bindkey '^h' backward-delete-char                   # Ctrl+h
bindkey '^H' backward-kill-word                     # Ctrl+backspace
bindkey '^w' backward-kill-word                     # Ctrl+w
bindkey '^[[Z' undo                                 # Shift+tab undo last action

# Push the current buffer onto the buffer stack and clear the buffer
bindkey '^q' push-line-or-edit                      # Ctrl+q


#### Colors ###################################################################
if [[ "${OSTYPE}" != "darwin"* ]]; then   # If not in MacOS
    if [[ -f /usr/bin/dircolors && -r ${HOME}/.dir_colors ]]; then
        eval $(/usr/bin/dircolors -b ${HOME}/.dir_colors)
    fi
else    # If in MacOS
    export CLICOLOR=1
    # Use https://geoff.greer.fm/lscolors/ to convert between BSD (LSCOLORS),
    # used in MacOS, and Linux colors (LS_COLORS)
    LS_COLORS='di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'
fi

# Colored man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'

# Load colors
autoload -Uz colors
colors


#### Others ###################################################################
# Directories stack size (number of directories shown in 'dirs -v')
DIRSTACKSIZE=6

# History file
HISTFILE=${ZDOTDIR}/.zsh_history
HISTSIZE=10000
SAVEHIST=20000

# Change EOL sign (default: '%')
PROMPT_EOL_MARK='%S$%s'


#### Theme ####################################################################
# Powerlevel10k
. ${ZSH_USERDATA}/themes/powerlevel10k/powerlevel10k.zsh-theme
. ${ZDOTDIR}/.p10k.zsh


#### ZSH Plugins ##############################################################
# zoxide
if exists zoxide; then
    eval "$(zoxide init zsh)"
fi

# Syntax Highlighting
if [[ -r "${ZSH_USERDATA}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    . ${ZSH_USERDATA}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

    # Highlight styles (commented = default)
    # ZSH_HIGHLIGHT_STYLES[default]=none
    # ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold
    # ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=yellow
    # ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
    # ZSH_HIGHLIGHT_STYLES[global-alias]=fg=cyan
    # ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
    ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold     # default: none
    # ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
    # ZSH_HIGHLIGHT_STYLES[path]=underline
    # ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
    # ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
    # ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue
    # ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue
    # ZSH_HIGHLIGHT_STYLES[command-substitution]=none
    # ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta
    # ZSH_HIGHLIGHT_STYLES[process-substitution]=none
    # ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta
    ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=cyan,bold     # default: none
    ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=cyan,bold     # default: none
    # ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
    # ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=magenta
    # ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
    # ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
    # ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
    # ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=cyan
    # ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=cyan
    # ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=cyan
    # ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=cyan
    # ZSH_HIGHLIGHT_STYLES[assign]=none
    ZSH_HIGHLIGHT_STYLES[redirection]=fg=yellow,bold            # default: none
    # ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
    # ZSH_HIGHLIGHT_STYLES[named-fd]=none
    # ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
    # ZSH_HIGHLIGHT_STYLES[arg0]=fg=green

    # Highlight brackets
    ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red
    ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue
    ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=yellow
    ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=green
    ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=yellow,bold
    ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout

    # Highlight patterns
    ZSH_HIGHLIGHT_PATTERNS+=('rm -rf' 'fg=white,bold,bg=red')
    ZSH_HIGHLIGHT_PATTERNS+=('sudo' 'fg=yellow,bold')
fi

# Auto Suggestions
if [[ -r "${ZSH_USERDATA}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    . ${ZSH_USERDATA}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
    ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
    # ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
fi


#### Source aliases, functions, and user custom configurations ################
[[ -r "${ZDOTDIR}/.aliases.zsh" ]] && source "${ZDOTDIR}/.aliases.zsh"
[[ -r "${ZDOTDIR}/.functions.zsh" ]] && source "${ZDOTDIR}/.functions.zsh"
[[ -r "${ZDOTDIR}/.custom.zsh" ]] && source "${ZDOTDIR}/.custom.zsh"


#### Applications #############################################################
# Less
export LESS='-R -i'     # -i is for insensitive search

# FZF
if exists fzf; then
    # Custom configs
    export FZF_COMPLETION_TRIGGER="'"
    export FZF_DEFAULT_OPTS="
    --no-mouse --height=50% -1 --reverse --multi --inline-info
    --preview '([[ -f {} ]] && [[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file) || ([[ -f {} ]] && (batcat --style=numbers --color=always {} || bat --style=numbers --color=always {} || cat {}) 2>/dev/null) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2>/dev/null | head -200'
    --preview-window='right:hidden:wrap'
    --bind='ctrl-v:execute(batcat --style=numbers --color=always {} < /dev/tty > /dev/tty 2>/dev/null || bat --style=numbers --color=always {} < /dev/tty > /dev/tty 2>/dev/null || less -f {} < /dev/tty > /dev/tty 2>7dev/null)'
    --bind 'ctrl-e:execute(nvim {} < /dev/tty > /dev/tty 2>&1)'
    --bind='ctrl-p:toggle-preview'
    --bind='ctrl-d:half-page-down'
    --bind='ctrl-u:half-page-up'
    --bind='ctrl-a:select-all'
    --bind='ctrl-y:execute-silent(echo -n {+} | xclip -in -selection clipboard)'
    --color=fg:#dbdbdb,bg:-1,hl:#5f87af
    --color=fg+:#ffffff,bg+:-1,hl+:#5fd7ff
    --color=info:#afaf87,prompt:#d7005f,pointer:#af5fff
    --color=marker:#87ff00,spinner:#af5fff,header:#87afaf"

    # If fd is installed, use it as the default source for fzf
    if exists fd; then
        export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude ".git" --exclude "node_modules"'
        export FZF_CTRL_T_COMMAND=${FZF_DEFAULT_COMMAND}
        export FZF_ALT_C_COMMAND='fd --type d --strip-cwd-prefix --hidden --follow --exclude ".git" --exclude "node_modules"'

        # Use fd for listing path candidates.
        # - The first argument to the function ($1) is the base path to start traversal
        _fzf_compgen_path() {
        fd --hidden --follow --exclude ".git" . "$1"
        }

        # Use fd to generate the list for directory completion
        _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
        }
    # If not, try to use ripgrep
    elif exists rg; then
        export FZF_DEFAULT_COMMAND='rg --files --hidden --smart-case --no-ignore-vcs --glob "!.git/" --glob "!node_modules/"'
        export FZF_CTRL_T_COMMAND=${FZF_DEFAULT_COMMAND}
    fi

    FZF_USERDATA="${HOME}/.local/share/fzf"

    # Key bindings and autocompletion
    . ${HOME}/.local/share/fzf/shell/key-bindings.zsh
    . ${HOME}/.local/share/fzf/shell/completion.zsh
fi

# batcat
if exists bat || exists batcat; then
    export BAT_PAGER='less -R'
fi

# SSH using GPG keys
if exists gpgconf; then
    export GPG_TTY=$(tty)
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    gpgconf --launch gpg-agent
fi

# Go
if exists go; then
    export GOPATH=${HOME}/go
    PATH=${PATH}:${GOPATH}/bin
fi


#### Export $PATH #############################################################
export -U PATH

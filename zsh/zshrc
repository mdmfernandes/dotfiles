#####################
# Mike's ZSH config #
#####################

# Set language environment
export LANG=en_US.UTF-8

# Preferred editor
export EDITOR='nvim'
export VISUAL='nvim'


#### Helpers ##################################################################
# Check if a command exists
exists()
{
    command -v "$1" >/dev/null 2>&1
}


#### Applications #############################################################
# fzf
export FZF_COMPLETION_TRIGGER="'"
export FZF_DEFAULT_OPTS="
--no-mouse --height=50% -1 --reverse --multi --inline-info
--preview '([[ -f {} ]] && [[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file) || ([[ -f {} ]] && (batcat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'
--preview-window='right:hidden:wrap'
--bind='ctrl-v:execute(batcat --style=numbers {} || less -f {})'
--bind 'ctrl-e:execute(echo {+} | xargs -o nvim)'
--bind='ctrl-p:toggle-preview'
--bind='ctrl-d:half-page-down'
--bind='ctrl-u:half-page-up'
--bind='ctrl-a:select-all'
--bind='ctrl-y:execute-silent(echo -n {+} | xclip -in -selection clipboard)'"
# If ripgrep is installed, use it with FZF
if exists rg; then
    export FZF_DEFAULT_COMMAND="rg --files --hidden --no-ignore-vcs"
    export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
fi

alias -g Z='| fzf'

# batcat
export BAT_PAGER="less -R"

# Go 
export GOPATH=$HOME/go
PATH=$PATH:$GOPATH/bin


#### User custom configurations ###############################################
[[ -f "$HOME/.config/zsh/.custom.zsh" ]] && source "$HOME/.config/zsh/.custom.zsh"

#### Export $PATH #############################################################
export -U PATH

#### Oh-my-zsh configuration ##################################################
# Path to oh-my-zsh installation
export ZSH="$HOME/.config/zsh/.oh-my-zsh"

# Theme - Powerlevel10k
ZSH_THEME="powerlevel10k/powerlevel10k"
source $HOME/.config/zsh/.p10k.zsh

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if pasting URLs and other text is messed up.
DISABLE_MAGIC_FUNCTIONS=true

# Plugins settings
_Z_DATA=$HOME/.config/zsh/.z
ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOQUIT=false

# Plugins to load
#  - Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Add wisely, as too many plugins slow down shell startup.
plugins=(vi-mode tmux colored-man-pages z zsh-autosuggestions zsh-syntax-highlighting fzf)

source $ZSH/oh-my-zsh.sh


#### Zsh configuration ########################################################
#setopt interactivecomments  # allow comments in interactive mode
setopt noclobber             # prevent from overwriting an existing file
#setopt magicequalsubst      # enable filename expansion for arguments of the form 'anything=expression'
setopt nonomatch             # hide error message if there is no match for the pattern
#setopt notify               # report the status of background jobs immediatly
#setopt numericglobsort      # sort filenames numerically when it makes sense
#setopt promptsubst          # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# Change EOL sign (default: '%')
PROMPT_EOL_MARK='%S$%s'

# History file
HISTFILE=$ZDOTDIR/.zsh_history
HISTSIZE=10000
SAVEHIST=20000
setopt hist_expire_dups_first   # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups         # ignore duplicated commands history list
setopt hist_ignore_space        # ignore commands that start with space
setopt hist_verify              # show command with history expansion to user before running it

# force zsh to show the complete history
alias history="history 0"

# don't complete functions
zstyle ':completion:*:functions' ignored-patterns '_*'

#new_line_before_prompt=yes
#precmd() {
    ## Print the previously configured title
    #print -Pnr -- "$TERM_TITLE"

    ## Print a new line before the prompt, but only if it is not the first line
    #if [ "$new_line_before_prompt" = yes ]; then
        #if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
            #_NEW_LINE_BEFORE_PROMPT=1
        #else
            #print ""
        #fi
    #fi
#}
